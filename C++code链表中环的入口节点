#include <iostream>
#include "NODE.h" 

using namespace std;
 
ListNode* MeetingNode(ListNode* pHead)
{
	if (pHead == nullptr)
		return nullptr;
	ListNode* pSlow = pHead->pNext;
	if (pSlow == nullptr)
		return nullptr;
	ListNode* pFast = pSlow->pNext;
	while (pFast != nullptr && pSlow != nullptr)
	{
		if (pFast == pSlow)
			return pFast;

		pSlow = pSlow->pNext;
		pFast = pFast->pNext;
		if (pFast != nullptr)
			pFast = pFast->pNext;
	}
	return nullptr;
}



ListNode* EntryNodeOfLoop(ListNode* pHead)
{
	ListNode* meetingNode = MeetingNode(pHead);
	 
	if (meetingNode == nullptr)
		return nullptr;

	//得到环中节点的数目
	int numOfNode = 1;
	ListNode* pNode1 = meetingNode;
	while (pNode1->pNext != meetingNode)
	{
		pNode1 = pNode1->pNext;
		numOfNode++;
	}

	//先移动pNode1，次数为环中节点的数目
	pNode1 = pHead;
	for (int i = 0; i < numOfNode; ++i)
	{
		pNode1 = pNode1->pNext;
	}
	ListNode* pNode2 = pHead;
	while (pNode1 != pNode2)
	{
		pNode1 = pNode1->pNext;
		pNode2 = pNode2->pNext;
	}

	return pNode1;
}


int main()
{
	ListNode* pNode1 = CreateListNode(1);
	ListNode* pNode2 = CreateListNode(2);
	ListNode* pNode3 = CreateListNode(3);
	ListNode* pNode4 = CreateListNode(4);
	ListNode* pNode5 = CreateListNode(5);
	ListNode* pNode6 = CreateListNode(6);


	ConnectListNodes(pNode1, pNode2);
	ConnectListNodes(pNode2, pNode3);
	ConnectListNodes(pNode3, pNode4);
	ConnectListNodes(pNode4, pNode5);
	ConnectListNodes(pNode5, pNode6);
	ConnectListNodes(pNode6, pNode3);
	ListNode* pNode = EntryNodeOfLoop(pNode1);
	cout << pNode->value << endl;
	system("PAUSE");
	return 0;
}
