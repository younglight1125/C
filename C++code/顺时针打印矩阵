#include <iostream>
#include "NODE.h" 
#include "BinaryTree.h"
using namespace std;
void PrintMatrixInCircle(int** numbers, int columns, int rows, int start);
void PrintNum(const int & num);

void PrintMatrixClockWisely(int ** numbers, int columns, int raws)
{
	if (numbers == nullptr || columns <= 0 || raws <= 0)
		return;

	int start = 0;

	while (columns > start * 2 && raws > start * 2)
	{
		PrintMatrixInCircle(numbers, columns, raws, start);
		start++;
	}
}

void PrintMatrixInCircle(int ** numbers, int columns, int raws, int start)
{
	int endX = columns - 1 - start;
	int endY = raws - 1 - start;

	//从左到右打印一行
	for (int i = start; i <= endX ; i++)
	{
		int number = numbers[start][i];
		PrintNum(number);
	}

	//从上到下打印一列
	if (start < endY)
	{
		for (int i = start+1; i <= endY; i++)
		{
			int number = numbers[i][endX];
			PrintNum(number);
		}
	}

	//从右到左打印一行
	if (start < endX && start < endY)
	{
		for (int i = endX-1; i >= start; --i)
		{
			int number = numbers[endY][i];
			PrintNum(number);
		}
	}

	//从下到上打印一列
	if (start < endY && start < endX - 1)
	{
		for (int i = endY-1; i >= start+1; --i)
		{
			int number = numbers[i][start];
			PrintNum(number);
		}
	}
}

void PrintNum(const int & num)
{	
	cout << num << endl;
}


//=======================测试代码=============
void Test(int columns, int raws)
{
	if (columns < 1 || raws < 1)
		return;

	int** numbers = new int*[raws];
	for (int i = 0; i < raws; i++)
	{
		numbers[i] = new int[columns];
		for (int j = 0; j < columns; j++)
		{
			numbers[i][j] = i * columns + j + 1;
		}
	}

	PrintMatrixClockWisely(numbers, columns, raws);
	printf("\n");

	for (int i = 0; i < raws; ++i)
		delete[](int*)numbers[i];

	delete[] numbers;
}
int main(int argc, char* argv[])
{
	Test(4, 4);
	system("PAUSE");
	return 0;
}
