#include <iostream>
#include <stack>
using namespace std;

template<class T>
class CQueue
{
public:
	CQueue(void);
	~CQueue(void);
	void appendTail(const T& element);
	T deleteHead();
private:
	stack<T> stack1;
	stack<T> stack2;
};

template<class T>
CQueue<T>::CQueue(void)
{
	
}

template<class T>
CQueue<T>::~CQueue(void)
{

}

template<class T>
void CQueue<T>::appendTail(const T & element)
{
	stack1.push(element);
}

template <class T>
T CQueue<T>::deleteHead()
{
	if (stack2.size() <= 0)
	{
		while (stack1.size() > 0)
		{
			T data = stack1.top();
			stack1.pop();
			stack2.push(data);
		}
	}

	//包含了stack1也是空栈
	if (stack2.size() == 0)
	{
		throw new exception("queue is empty");
	}



	T head = stack2.top();
	stack2.pop();
	return head;
}

int main()
{
	CQueue<int> CQ;
	CQ.appendTail(1);
	CQ.deleteHead();
	CQ.appendTail(2);
	CQ.appendTail(3);
	CQ.appendTail(4);
	int num = CQ.deleteHead();
	cout << num << endl;
	system("PAUSE");
	return 0;
}
